type Client {
    id: ID
    name: String
    surname: String
    company: String
    emails: [Email]
    age: Int
    type: TypeClient
    pedidos: [Pedido]
}

type Pedido {
    product: String
    price: Int
}

type Email {
    email: String
}

type Product {
    id: ID
    name: String!
    price: Int!
    stock: Int!
}

enum TypeClient {
    BASICO
    PREMIUM
}

input PedidoInput {
    product: String
    price: Int
}

input EmailInput {
    email: String
}

""" Campos para los clientes nuevos """
input ClientInput {
    id: ID
    name: String!
    surname: String!
    company: String!
    emails: [EmailInput]
    age: Int!
    type: TypeClient! 
    pedidos: [PedidoInput]
}

input ProductInput {
    id: ID
    name: String!
    price: Int!
    stock: Int!
}

"""" Queries """
type Query {
    # Queries for Clients
    getClient(id: ID): Client
    getClients(limit: Int, offset: Int): [Client]
    totalClients: String
    # Queries for Products
    getProducts(limit: Int, offset: Int): [Product]
    getProduct(id: ID!): Product
    totalProducts: String
}

""" Mutations para crear nuevos clientes """
type Mutation {
    # Clients
    # Nombre del Resolver, Input con datos y Valor que retorna
    """ Permite crear nuevos clientes """
    createClient(input: ClientInput): Client
    """ Permite actualizar clientes """
    updateClient(input: ClientInput): Client
    """ Permite eliminar clientes """
    deleteClient(id: ID!): String
    # Products
    newProduct(input: ProductInput): Product
    updateProduct(input: ProductInput): Product
    deleteProduct(id: ID!): String
}